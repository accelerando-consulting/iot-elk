# nginx settings to serve docker-registry with password authentication

upstream node-red {
	server node-red:1880;
}

upstream kibana {
	server kibana:5601;
}

upstream registry {
        server registry.cloudprovider.example.com:443;
}

upstream mqtt-ws {
	 server mqtt:9001;
}

server  {
	server_name		website.example.com;
	listen			80 default_server;
	client_max_body_size	0;
	root /opt/iot/html;

	location / {
	  return                301 https://$server_name$request_uri;
	}
}

server  {
	server_name		website.example.com;
	listen			443 ssl;
	ssl_certificate		/opt/iot/certs/fullchain.pem;
	ssl_certificate_key	/opt/iot/certs/privkey.pem;
	client_max_body_size	0;
	root /opt/iot/html;

	location / {
		auth_basic		"IoT-ELK Development";
		auth_basic_user_file	/opt/iot/htpasswd;

		proxy_pass		http://node-red/;
		proxy_redirect		off;
		proxy_buffering		off;
		proxy_set_header	Host		$http_host;
		proxy_set_header	X-Real-IP	$remote_addr;
		proxy_set_header	X-Forwarded-For $proxy_add_x_forwarded_for;
 		proxy_http_version 	1.1;
    		proxy_set_header 	Upgrade $http_upgrade;
    		proxy_set_header 	Connection "upgrade";
		proxy_ssl_session_reuse on;
	}    

	location /kibana/ {
		auth_basic		"IoT-ELK Development";
		auth_basic_user_file	/opt/iot/htpasswd;
    		proxy_set_header 	Authorization	"";
		proxy_pass		http://kibana/;
	}

        location /ui/ {
		auth_basic		"IoT-ELK Development";
		auth_basic_user_file	/opt/iot/htpasswd;
    		proxy_set_header 	Authorization	"";
		proxy_set_header	Host		"localhost";
		proxy_pass		http://react/;
	}

}

upstream elasticsearch {
	server elasticsearch:9200;
}

server  {
	server_name		website.example.com;
	listen			9243 ssl;
	ssl_certificate		/opt/iot/certs/fullchain.pem;
	ssl_certificate_key	/opt/iot/certs/privkey.pem;
	client_max_body_size	0;

	location / {
		auth_basic		"IoT-ELK Elasticsearch";
		auth_basic_user_file	/opt/iot/htpasswd;
    		proxy_set_header 	Authorization	"";
		proxy_pass		http://elasticsearch/;
	}
}

server  {
	server_name		website.example.com;
	listen			9001 ssl;
	ssl_certificate		/opt/iot/certs/fullchain.pem;
	ssl_certificate_key	/opt/iot/certs/privkey.pem;
	client_max_body_size	0;
	root /opt/iot/html;

	location / {
	        #auth_basic		"IoT-ELK MQTT Websockets";
		#auth_basic_user_file	/opt/iot/htpasswd;

		proxy_pass		http://mqtt-ws/;
		proxy_redirect		off;
		proxy_buffering		off;
		proxy_set_header	Host		$http_host;
		proxy_set_header	X-Real-IP	$remote_addr;
		proxy_set_header	X-Forwarded-For $proxy_add_x_forwarded_for;
 		proxy_http_version 	1.1;
    		proxy_set_header 	Upgrade $http_upgrade;
    		proxy_set_header 	Connection "upgrade";
		proxy_ssl_session_reuse on;
	}    

	location /mqtt {
		#auth_basic		"IoT-ELK MQTT Websockets";
		#auth_basic_user_file	/opt/iot/htpasswd;

		proxy_pass		http://mqtt-ws/;
		proxy_redirect		off;
		proxy_buffering		off;
		proxy_set_header	Host		$http_host;
		proxy_set_header	X-Real-IP	$remote_addr;
		proxy_set_header	X-Forwarded-For $proxy_add_x_forwarded_for;
 		proxy_http_version 	1.1;
    		proxy_set_header 	Upgrade $http_upgrade;
    		proxy_set_header 	Connection "upgrade";
		proxy_ssl_session_reuse on;
	}    
}

server  {
        server_name             iot-registry.example.com;
        listen                  443 default ssl;
	ssl_certificate		/opt/iot/certs/fullchain.pem;
	ssl_certificate_key	/opt/iot/certs/privkey.pem;
        client_max_body_size    0;
        gzip                    off;

        location / {
                proxy_pass              https://registry;
                proxy_redirect          off;
                proxy_set_header        Host            "registry.cloudprovider.example.com";
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        }

}
